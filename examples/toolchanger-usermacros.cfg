# Written by Justin F. Hallett

; Only define unless you have a zswitch
[gcode_macro _TOOLCHANGER_ZSWITCH]
variable_x: 104.00 # X Position directly over switch
variable_y: -66.00 # Y Position directly over switch
gcode:


; Only define if you want to run code before a homing
[gcode_macro _TOOLCHANGER_HOMING_START]
gcode:
  STATUS_HOMING
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True


; Only define if you want to run code after a homing
[gcode_macro _TOOLCHANGER_HOMING_END]
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False
  STATUS_READY


; Only define if you have nozzle cleaner 
[gcode_macro _TOOLCHANGER_CLEAN_NOZZLE]
variable_start_x: 301
variable_start_y: -30
variable_start_z: 2.5
variable_wipe_dist: -40
variable_wipe_times: 6 
variable_wipe_speed: 200
variable_raise_distance: 25
variable_min_temp: 150
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

  STATUS_CLEANING
  RESPOND TYPE=echo MSG="Cleaning nozzle"
  {% set heater =  printer.toolhead.extruder %}
  {% set target_temp = printer[heater].target %}
  {% if target_temp < min_temp %}
    M104 S{min_temp}
  {% endif %}

  G90
  ## Move nozzle to start position
  G1 X{start_x + (wipe_dist/2)} Y{start_y} F12000
  TEMPERATURE_WAIT SENSOR={heater} MINIMUM={min_temp}

  {% if params.Z is defined %}
    {action_respond_info("Custom Z")}
    M117 Custom Z
    G1 Z{params.Z} F1500
  {% else %}
    G1 Z{start_z} F1500
  {% endif %}

  ## Wipe nozzle
  G1 X{start_x} F{wipe_speed * 60}
  {% for wipes in range(1, (wipe_times + 1)) %}
    G1 X{start_x + wipe_dist} F{wipe_speed * 60}
    G1 X{start_x} F{wipe_speed * 60}
  {% endfor %}

  ## Raise nozzle
  G1 Z{raise_distance}
  M104 S{target_temp}

  MOVE_TO_CENTER
  STATUS_READY


[gcode_macro _TOOLCHANGER_CLEAR_PAUSE]
gcode:
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CRASH_PAUSE VARIABLE=active_tool VALUE=-1
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CRASH_PAUSE VARIABLE=temps VALUE=[]
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CRASH_PAUSE VARIABLE=crashed VALUE=0

[gcode_macro _TOOLCHANGER_CRASH_RESUME]
variable_active_tool: -1
variable_temps: []
gcode:
  M117 crashed... resuming
  INITIALIZE_TOOLCHANGER
  {% if printer.tool_probe_endstop.active_tool_number != {active_tool} %}
    T{active_tool}
  {% endif %}
  M117 sequential reheating
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    {% if tool_nr in temps and temps[tool_nr] > 0 %}
      M109 T{tool_nr} S{temps[tool_nr]}
    {% endif %}
  {% endfor %}
  _TOOLCHANGER_CLEAR_PAUSE
  M117 resuming print


[gcode_macro _TOOLCHANGER_CRASH_PAUSE]
# if you have a custom RESUME gcode add
#  {% if printer["gcode_macro _TOOLCHANGER_CRASH_PAUSE"].crashed|int > 0 %}
#    _TOOLCHANGER_CRASH_RESUME
#  {% else %}
#    <your current macro gcode>
#  {% endif %}
variable_crashed: 0
gcode:
  M117 crashed... pausing
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CRASH_PAUSE VARIABLE=crashed VALUE=1
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CRASH_PAUSE VARIABLE=active_tool VALUE={printer.tool_probe_endstop.active_tool_number}
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CRASH_PAUSE VARIABLE=temps[{tool_nr}] VALUE={printer[printer.toolchanger.tool_names[tool_nr]].extruder.target}
    M104 T{tool_nr} S0
  {% endif %}
  M117 paused


[gcode_macro _TOOLCHANGER_TOOL_BEFORE_CHANGE]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  RESPOND TYPE=echo MSG='Before change {tool.name}'
  ;STATUS_BUSY T={tool.tool_number}
  _TOOL_BEFORE_CHANGE {rawparams}


[gcode_macro _TOOLCHANGER_TOOL_AFTER_CHANGE]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  RESPOND TYPE=echo MSG='After change {tool.name}'
  _TOOL_AFTER_CHANGE {rawparams}


[gcode_macro _TOOLCHANGER_TOOL_DROPOFF]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  RESPOND TYPE=echo MSG='Dropping off {tool.name}'
  ;SET_FILAMENT_SENSOR SENSOR=filament_sensor_T{tool.tool_number} ENABLE=0
  _TOOL_DROPOFF {rawparams}
  ;STATUS_READY T={tool.tool_number}


[gcode_macro _TOOLCHANGER_TOOL_PICKUP]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  RESPOND TYPE=echo MSG='Picking up {tool.name}'
  ;STATUS_HEATING T={tool.tool_number}
  ;SET_FILAMENT_SENSOR SENSOR=filament_sensor_T{tool.tool_number} ENABLE=1
  _TOOL_PICKUP {rawparams}
  ;_TOOLCHANGER_CLEAN_NOZZLE
  ;STATUS_PRINTING T={tool.tool_number}

[gcode_macro _TOOLCHANGER_DISABLE_FILAMENT_SENSORS]
gcode:
  {% set toolnames = printer.toolchanger.tool_names %}
  {% for toolname in toolnames %}
    SET_GCODE_VARIABLE MACRO={toolname[5:]} VARIABLE=active VALUE=0
  {% endfor %}
